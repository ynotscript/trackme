package com.ynotscript.trackme.api.db.ibatis.models;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.ynotscript.trackme.api.configuration.MainConfiguration;
import com.ynotscript.trackme.api.db.ibatis.dynamic.PrefixedTableName;

public class OperatingSystemExample implements PrefixedTableName {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table trackme_operating_system
	 * @ibatorgenerated  Wed Jun 01 13:12:47 CEST 2011
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table trackme_operating_system
	 * @ibatorgenerated  Wed Jun 01 13:12:47 CEST 2011
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table trackme_operating_system
	 * @ibatorgenerated  Wed Jun 01 13:12:47 CEST 2011
	 */
	public OperatingSystemExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table trackme_operating_system
	 * @ibatorgenerated  Wed Jun 01 13:12:47 CEST 2011
	 */
	protected OperatingSystemExample(OperatingSystemExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table trackme_operating_system
	 * @ibatorgenerated  Wed Jun 01 13:12:47 CEST 2011
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table trackme_operating_system
	 * @ibatorgenerated  Wed Jun 01 13:12:47 CEST 2011
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table trackme_operating_system
	 * @ibatorgenerated  Wed Jun 01 13:12:47 CEST 2011
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table trackme_operating_system
	 * @ibatorgenerated  Wed Jun 01 13:12:47 CEST 2011
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table trackme_operating_system
	 * @ibatorgenerated  Wed Jun 01 13:12:47 CEST 2011
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table trackme_operating_system
	 * @ibatorgenerated  Wed Jun 01 13:12:47 CEST 2011
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table trackme_operating_system
	 * @ibatorgenerated  Wed Jun 01 13:12:47 CEST 2011
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table trackme_operating_system
	 * @ibatorgenerated  Wed Jun 01 13:12:47 CEST 2011
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andOperatingSystemIdIsNull() {
			addCriterion("id_operating_system is null");
			return this;
		}

		public Criteria andOperatingSystemIdIsNotNull() {
			addCriterion("id_operating_system is not null");
			return this;
		}

		public Criteria andOperatingSystemIdEqualTo(Integer value) {
			addCriterion("id_operating_system =", value, "operatingSystemId");
			return this;
		}

		public Criteria andOperatingSystemIdNotEqualTo(Integer value) {
			addCriterion("id_operating_system <>", value, "operatingSystemId");
			return this;
		}

		public Criteria andOperatingSystemIdGreaterThan(Integer value) {
			addCriterion("id_operating_system >", value, "operatingSystemId");
			return this;
		}

		public Criteria andOperatingSystemIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("id_operating_system >=", value, "operatingSystemId");
			return this;
		}

		public Criteria andOperatingSystemIdLessThan(Integer value) {
			addCriterion("id_operating_system <", value, "operatingSystemId");
			return this;
		}

		public Criteria andOperatingSystemIdLessThanOrEqualTo(Integer value) {
			addCriterion("id_operating_system <=", value, "operatingSystemId");
			return this;
		}

		public Criteria andOperatingSystemIdIn(List<Integer> values) {
			addCriterion("id_operating_system in", values, "operatingSystemId");
			return this;
		}

		public Criteria andOperatingSystemIdNotIn(List<Integer> values) {
			addCriterion("id_operating_system not in", values,
					"operatingSystemId");
			return this;
		}

		public Criteria andOperatingSystemIdBetween(Integer value1,
				Integer value2) {
			addCriterion("id_operating_system between", value1, value2,
					"operatingSystemId");
			return this;
		}

		public Criteria andOperatingSystemIdNotBetween(Integer value1,
				Integer value2) {
			addCriterion("id_operating_system not between", value1, value2,
					"operatingSystemId");
			return this;
		}

		public Criteria andNameIsNull() {
			addCriterion("name is null");
			return this;
		}

		public Criteria andNameIsNotNull() {
			addCriterion("name is not null");
			return this;
		}

		public Criteria andNameEqualTo(String value) {
			addCriterion("name =", value, "name");
			return this;
		}

		public Criteria andNameNotEqualTo(String value) {
			addCriterion("name <>", value, "name");
			return this;
		}

		public Criteria andNameGreaterThan(String value) {
			addCriterion("name >", value, "name");
			return this;
		}

		public Criteria andNameGreaterThanOrEqualTo(String value) {
			addCriterion("name >=", value, "name");
			return this;
		}

		public Criteria andNameLessThan(String value) {
			addCriterion("name <", value, "name");
			return this;
		}

		public Criteria andNameLessThanOrEqualTo(String value) {
			addCriterion("name <=", value, "name");
			return this;
		}

		public Criteria andNameLike(String value) {
			addCriterion("name like", value, "name");
			return this;
		}

		public Criteria andNameNotLike(String value) {
			addCriterion("name not like", value, "name");
			return this;
		}

		public Criteria andNameIn(List<String> values) {
			addCriterion("name in", values, "name");
			return this;
		}

		public Criteria andNameNotIn(List<String> values) {
			addCriterion("name not in", values, "name");
			return this;
		}

		public Criteria andNameBetween(String value1, String value2) {
			addCriterion("name between", value1, value2, "name");
			return this;
		}

		public Criteria andNameNotBetween(String value1, String value2) {
			addCriterion("name not between", value1, value2, "name");
			return this;
		}

		public Criteria andVersionIsNull() {
			addCriterion("version is null");
			return this;
		}

		public Criteria andVersionIsNotNull() {
			addCriterion("version is not null");
			return this;
		}

		public Criteria andVersionEqualTo(String value) {
			addCriterion("version =", value, "version");
			return this;
		}

		public Criteria andVersionNotEqualTo(String value) {
			addCriterion("version <>", value, "version");
			return this;
		}

		public Criteria andVersionGreaterThan(String value) {
			addCriterion("version >", value, "version");
			return this;
		}

		public Criteria andVersionGreaterThanOrEqualTo(String value) {
			addCriterion("version >=", value, "version");
			return this;
		}

		public Criteria andVersionLessThan(String value) {
			addCriterion("version <", value, "version");
			return this;
		}

		public Criteria andVersionLessThanOrEqualTo(String value) {
			addCriterion("version <=", value, "version");
			return this;
		}

		public Criteria andVersionLike(String value) {
			addCriterion("version like", value, "version");
			return this;
		}

		public Criteria andVersionNotLike(String value) {
			addCriterion("version not like", value, "version");
			return this;
		}

		public Criteria andVersionIn(List<String> values) {
			addCriterion("version in", values, "version");
			return this;
		}

		public Criteria andVersionNotIn(List<String> values) {
			addCriterion("version not in", values, "version");
			return this;
		}

		public Criteria andVersionBetween(String value1, String value2) {
			addCriterion("version between", value1, value2, "version");
			return this;
		}

		public Criteria andVersionNotBetween(String value1, String value2) {
			addCriterion("version not between", value1, value2, "version");
			return this;
		}
	}

	private String prefix = MainConfiguration.getConfiguration()
			.getString(MainConfiguration.Db.DB_TABLE_PREFIX);

	@Override
	public final String getPrefix() {
		return prefix;
	}

	@Override
	public final void setPrefix(final String prefix) {
		this.prefix = prefix;
	}
}